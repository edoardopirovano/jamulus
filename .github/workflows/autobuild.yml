#### Automatically build and upload releases to GitHub ####

# see analyse_git_reference.py for implementation of the logic:
#     for every push to a branch starting with "autobuild": (can be used during development for tighter supervision of builds)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every pull-request to master:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix of the github-action-run (not as release), and only retain those files for limited period
#     for every tag that starts with 'r' and has an arbitrary suffix (e.g. beta1, rc1, etc.)
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a prerelease
#     for every tag that starts with 'r' and does not have any suffix:
#          - do CodeQl while building for every platform
#          - publish the created binaries/packs only as artifacts/appendix as a release
#

on:
  workflow_dispatch:
  push:
    tags:
      - "r*"
    branches:
      - "autobuild*" # for developers: branches starting with autobuild will be built and evaluated on each push
      - "autobuild/*" # for developers: branches starting with autobuild will be built and evaluated on each push
      - "master"
      - "test-codeql"
    #  - "*"
  pull_request: # The branches below must be a subset of the branches in "push"
    branches:
      - master

name: Auto-Build
jobs:
  create_release:
    name: Prepare Auto-Build/Release
    runs-on: ubuntu-20.04
    outputs:
      publish_to_release: ${{ steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE }}
      upload_url: ${{ steps.create_release_step.outputs.upload_url }}
      version: ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }}
      version_name: ${{ steps.jamulus-build-vars.outputs.RELEASE_VERSION_NAME }}
      x_github_workspace: ${{ steps.jamulus-build-vars.outputs.X_GITHUB_WORKSPACE }} #needed, because matrix can not directly access ${{ github.workspace }} aparrently

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set variables
      # Determine release / pre-release
      - name: Get Jamulus build info, determine actions & variables
        run: python3 ${{ github.workspace }}/.github/actions_scripts/analyse_git_reference.py
        id: jamulus-build-vars

      # remove release, if it exists (with this releasetag)
      - name: Remove release, if existing (for branches)
        if: ${{ contains(steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE, 'true') }}
        continue-on-error: true
        uses: dev-drprasad/delete-tag-and-release@v0.1.2
        with:
          delete_release: true
          tag_name: ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # create release (empty, filled by next jobs)
      - name: "Create Release ${{steps.jamulus-build-vars.outputs.RELEASE_TAG}}  {{steps.jamulus-build-vars.outputs.RELEASE_TITLE}}"
        if: ${{ contains(steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE, 'true') }}
        id: create_release_step
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
          release_name: ${{ steps.jamulus-build-vars.outputs.RELEASE_TITLE }}
          body_path: ${{ github.workspace }}/autoLatestChangelog.md
          prerelease: ${{ steps.jamulus-build-vars.outputs.IS_PRERELEASE }}
          draft: false

      ### CANCEL ### can be used for development concerning release-creation
      #- name:                    Cancelthrougherroe
      #  run:                     myundefinedfunction

  release_assets:
    name: Build assets for ${{ matrix.config.config_name }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix: # Think of this like a foreach loop. Basically runs the steps with every combination of the contents of this. More info: https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        config:
          - config_name: Linux (artifacts+codeQL)
            target_os: linux
            building_on_os: ubuntu-18.04
            cmd1_prebuild: "sh ./autobuild/linux/autobuild_deb_1_prepare.sh" # this step needs sh instead of bash for permissions
            cmd2_build: "./autobuild/linux/autobuild_deb_2_build.sh"
            cmd3_postbuild: "./autobuild/linux/autobuild_deb_3_copy_files.sh"
            uses_codeql: true

    runs-on: ${{ matrix.config.building_on_os }}
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      # Prepare (install QT & dependencies)
      - name: "Prepare for ${{ matrix.config.config_name }}"
        if: ${{ matrix.config.cmd1_prebuild }}
        run: ${{ matrix.config.cmd1_prebuild }}
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true" # allow setting environment variables
          jamulus_project_path: ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}

      # Initialize CodeQL tools for code-scanning for security
      - name: Initialize CodeQL
        if: matrix.config.uses_codeql
        uses: github/codeql-action/init@v1.0.15
        with:
          languages: "cpp"

      - name: Dump env
        env:
          GITHUB_CONTEXT: ${{ toJSON(env) }}
        run: echo "$GITHUB_CONTEXT"

      # Build
      - name: "Build for ${{ matrix.config.config_name }}"
        id: step_macos_build
        if: ${{ matrix.config.cmd2_build }}
        run: ${{ matrix.config.cmd2_build }} ${{ github.workspace }}
        env:
          jamulus_project_path: ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERT}}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERT_PWD }}
          MACOS_CERTIFICATE_ID: ${{ secrets.MACOS_CERT_ID }}
          NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          SEMMLE_DEBUG_TRACER: "10000"

      - name: "Post-Build for ${{ matrix.config.config_name }}"
        id: step_cmd3_postbuild
        if: ${{ matrix.config.cmd3_postbuild }}
        run: ${{ matrix.config.cmd3_postbuild }} ${{ github.workspace }}
        env:
          jamulus_project_path: ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}

      # Upload tracer logs
      - name: Upload Tracer logs (old)
        uses: actions/upload-artifact@v2
        with:
          name: tracer-logs-old
          path: /home/runner/work/_temp/compound-build-tracer.log
          retention-days: 31

      - name: Upload Tracer logs (new)
        uses: actions/upload-artifact@v2
        with:
          name: tracer-logs-new
          path: /home/runner/work/_temp/codeql_databases/log/build-tracer.log
          retention-days: 31

      - name: Upload spec (old)
        uses: actions/upload-artifact@v2
        with:
          name: spec-old
          path: /home/runner/work/_temp/compound-spec
          retention-days: 31

      - name: Upload spec (new)
        uses: actions/upload-artifact@v2
        with:
          name: spec-new
          path: /home/runner/work/_temp/codeql_databases/working/tracing/*.spec
          retention-days: 31

      # Run CodeQL tools for code-scanning for security
      - name: Perform CodeQL Analysis
        if: matrix.config.uses_codeql
        uses: github/codeql-action/analyze@v1.0.15
        with:
          skip-queries: true
